/* 1. 머쓱이네 피자가게는 피자를 일곱 조각으로 잘라 줍니다. 
피자를 나눠먹을 사람의 수 n이 주어질 때, 모든 사람이 피자를 한 조각 이상 먹기 위해 필요한 피자의 수를 return 하는 solution 함수를 완성해보세요. */

class Solution { // 피자 나눠 먹기(1)
    public int solution(int n) { // n은 먹을 사람 수, 피자 한판에 7조각
        int answer = 0;
       
        if(n%7 == 0){ // n명이서 피자 n판을 먹고 남은게 없으면
            answer = n/7; // 피자 n을 7조각 나눈다.
        }
        else{
            answer = n/7 + 1; // 피자 n판을에 추가
        }
        
        //int answer = (n%7==0) ? n/7 : n/7 + 1; 간단한 다른 풀이
        
        return answer;
    }
}

/* 2. 머쓱이네 피자가게는 피자를 여섯 조각으로 잘라 줍니다. 
피자를 나눠먹을 사람의 수 n이 매개변수로 주어질 때, 
n명이 주문한 피자를 남기지 않고 모두 같은 수의 피자 조각을 먹어야 한다면 최소 몇 판을 시켜야 하는지를 return 하도록 solution 함수를 완성해보세요. */

class Solution { // 피자 나눠 먹기(2)
    public int solution(int n) {
        int answer = 0;
        for(int i = 1; i <= n; i++){ // i이 n보다 작거나 같을때
            if(i * 6 % n == 0){ // i(최소 피자 판수) * 6(피자 한판 조각 개수) % n(먹는 사람 수)의 나머지가 0
                answer = i;
                break;
            }
        }
        return answer;
    }
}

/* 3. 머쓱이네 피자가게는 피자를 두 조각에서 열 조각까지 원하는 조각 수로 잘라줍니다. 
피자 조각 수 slice와 피자를 먹는 사람의 수 n이 매개변수로 주어질 때, 
n명의 사람이 최소 한 조각 이상 피자를 먹으려면 최소 몇 판의 피자를 시켜야 하는지를 return 하도록 solution 함수를 완성해보세요. */

class Solution { // 피자 나눠 먹기(3)
    public int solution(int slice, int n) {
        int answer = 0;
        for(int i = 0; i <= n; i++){
            if(n%slice == 0){
                answer = n/slice;
            }
            else{
                answer = n/slice + 1;
            }
        }
        return answer;
    }
}

// 4. 정수 배열 numbers가 매개변수로 주어집니다. numbers의 원소의 평균값을 return하도록 solution 함수를 완성해주세요.

class Solution { // 배열의 평균값
    public double solution(int[] numbers) {
        double answer = 0;
        double sum = 0; // 합계
        double avg = 0; // 평균
        for(int i = 0; i < numbers.length; i++){ // numbers길이 미만 동안 반복
            sum += numbers[i];
            avg = sum/numbers.length;
            answer = avg;
        }
        
        return answer;
    }
}
